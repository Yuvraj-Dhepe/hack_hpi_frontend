// Code generated by stanc v2.33.1
#include <stan/model/model_header.hpp>
namespace hier_reg_model_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 44> locations_array__ =
  {" (found before start of program)",
  " (in 'hier_reg.stan', line 30, column 2 to column 21)",
  " (in 'hier_reg.stan', line 31, column 2 to column 20)",
  " (in 'hier_reg.stan', line 34, column 2 to column 21)",
  " (in 'hier_reg.stan', line 35, column 2 to column 33)",
  " (in 'hier_reg.stan', line 38, column 2 to column 20)",
  " (in 'hier_reg.stan', line 39, column 2 to column 32)",
  " (in 'hier_reg.stan', line 44, column 2 to column 26)",
  " (in 'hier_reg.stan', line 45, column 2 to column 29)",
  " (in 'hier_reg.stan', line 47, column 2 to column 25)",
  " (in 'hier_reg.stan', line 48, column 2 to column 28)",
  " (in 'hier_reg.stan', line 52, column 4 to column 45)",
  " (in 'hier_reg.stan', line 53, column 4 to column 42)",
  " (in 'hier_reg.stan', line 51, column 17 to line 54, column 3)",
  " (in 'hier_reg.stan', line 51, column 2 to line 54, column 3)",
  " (in 'hier_reg.stan', line 58, column 4 to column 20)",
  " (in 'hier_reg.stan', line 60, column 4 to column 14)",
  " (in 'hier_reg.stan', line 61, column 4 to column 68)",
  " (in 'hier_reg.stan', line 62, column 4 to column 31)",
  " (in 'hier_reg.stan', line 57, column 17 to line 63, column 3)",
  " (in 'hier_reg.stan', line 57, column 2 to line 63, column 3)",
  " (in 'hier_reg.stan', line 17, column 2 to column 17)",
  " (in 'hier_reg.stan', line 18, column 2 to column 17)",
  " (in 'hier_reg.stan', line 19, column 2 to column 17)",
  " (in 'hier_reg.stan', line 20, column 2 to column 17)",
  " (in 'hier_reg.stan', line 21, column 8 to column 9)",
  " (in 'hier_reg.stan', line 21, column 2 to column 38)",
  " (in 'hier_reg.stan', line 22, column 9 to column 10)",
  " (in 'hier_reg.stan', line 22, column 2 to column 14)",
  " (in 'hier_reg.stan', line 23, column 9 to column 10)",
  " (in 'hier_reg.stan', line 23, column 12 to column 13)",
  " (in 'hier_reg.stan', line 23, column 2 to column 17)",
  " (in 'hier_reg.stan', line 24, column 9 to column 10)",
  " (in 'hier_reg.stan', line 24, column 12 to column 13)",
  " (in 'hier_reg.stan', line 24, column 2 to column 17)",
  " (in 'hier_reg.stan', line 25, column 2 to column 22)",
  " (in 'hier_reg.stan', line 30, column 9 to column 10)",
  " (in 'hier_reg.stan', line 30, column 12 to column 13)",
  " (in 'hier_reg.stan', line 31, column 9 to column 10)",
  " (in 'hier_reg.stan', line 31, column 12 to column 13)",
  " (in 'hier_reg.stan', line 34, column 9 to column 10)",
  " (in 'hier_reg.stan', line 35, column 18 to column 19)",
  " (in 'hier_reg.stan', line 38, column 9 to column 10)",
  " (in 'hier_reg.stan', line 39, column 18 to column 19)"};
class hier_reg_model final : public model_base_crtp<hier_reg_model> {
 private:
  int M;
  int N;
  int K;
  int J;
  std::vector<int> user;
  Eigen::Matrix<double,-1,1> Y_data__;
  Eigen::Matrix<double,-1,-1> X_data__;
  Eigen::Matrix<double,-1,-1> D_data__;
  double sigma;
  Eigen::Map<Eigen::Matrix<double,-1,1>> Y{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> D{nullptr, 0, 0};
 public:
  ~hier_reg_model() {}
  hier_reg_model(stan::io::var_context& context__, unsigned int
                 random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "hier_reg_model_namespace::hier_reg_model";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 21;
      context__.validate_dims("data initialization", "M", "int",
        std::vector<size_t>{});
      M = std::numeric_limits<int>::min();
      current_statement__ = 21;
      M = context__.vals_i("M")[(1 - 1)];
      current_statement__ = 21;
      stan::math::check_greater_or_equal(function__, "M", M, 1);
      current_statement__ = 22;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 22;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 22;
      stan::math::check_greater_or_equal(function__, "N", N, 1);
      current_statement__ = 23;
      context__.validate_dims("data initialization", "K", "int",
        std::vector<size_t>{});
      K = std::numeric_limits<int>::min();
      current_statement__ = 23;
      K = context__.vals_i("K")[(1 - 1)];
      current_statement__ = 23;
      stan::math::check_greater_or_equal(function__, "K", K, 1);
      current_statement__ = 24;
      context__.validate_dims("data initialization", "J", "int",
        std::vector<size_t>{});
      J = std::numeric_limits<int>::min();
      current_statement__ = 24;
      J = context__.vals_i("J")[(1 - 1)];
      current_statement__ = 24;
      stan::math::check_greater_or_equal(function__, "J", J, 1);
      current_statement__ = 25;
      stan::math::validate_non_negative_index("user", "N", N);
      current_statement__ = 26;
      context__.validate_dims("data initialization", "user", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      user = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 26;
      user = context__.vals_i("user");
      current_statement__ = 26;
      stan::math::check_greater_or_equal(function__, "user", user, 1);
      current_statement__ = 26;
      stan::math::check_less_or_equal(function__, "user", user, M);
      current_statement__ = 27;
      stan::math::validate_non_negative_index("Y", "N", N);
      current_statement__ = 28;
      context__.validate_dims("data initialization", "Y", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      Y_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                   std::numeric_limits<double>::quiet_NaN());
      new (&Y) Eigen::Map<Eigen::Matrix<double,-1,1>>(Y_data__.data(), N);
      {
        std::vector<local_scalar_t__> Y_flat__;
        current_statement__ = 28;
        Y_flat__ = context__.vals_r("Y");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          stan::model::assign(Y, Y_flat__[(pos__ - 1)],
            "assigning variable Y", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 29;
      stan::math::validate_non_negative_index("X", "N", N);
      current_statement__ = 30;
      stan::math::validate_non_negative_index("X", "K", K);
      current_statement__ = 31;
      context__.validate_dims("data initialization", "X", "double",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(K)});
      X_data__ = Eigen::Matrix<double,-1,-1>::Constant(N, K,
                   std::numeric_limits<double>::quiet_NaN());
      new (&X) Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_data__.data(), N, K);
      {
        std::vector<local_scalar_t__> X_flat__;
        current_statement__ = 31;
        X_flat__ = context__.vals_r("X");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            stan::model::assign(X, X_flat__[(pos__ - 1)],
              "assigning variable X", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 32;
      stan::math::validate_non_negative_index("D", "N", N);
      current_statement__ = 33;
      stan::math::validate_non_negative_index("D", "J", J);
      current_statement__ = 34;
      context__.validate_dims("data initialization", "D", "double",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(J)});
      D_data__ = Eigen::Matrix<double,-1,-1>::Constant(N, J,
                   std::numeric_limits<double>::quiet_NaN());
      new (&D) Eigen::Map<Eigen::Matrix<double,-1,-1>>(D_data__.data(), N, J);
      {
        std::vector<local_scalar_t__> D_flat__;
        current_statement__ = 34;
        D_flat__ = context__.vals_r("D");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            stan::model::assign(D, D_flat__[(pos__ - 1)],
              "assigning variable D", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 35;
      context__.validate_dims("data initialization", "sigma", "double",
        std::vector<size_t>{});
      sigma = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 35;
      sigma = context__.vals_r("sigma")[(1 - 1)];
      current_statement__ = 35;
      stan::math::check_greater_or_equal(function__, "sigma", sigma, 0);
      current_statement__ = 36;
      stan::math::validate_non_negative_index("theta", "M", M);
      current_statement__ = 37;
      stan::math::validate_non_negative_index("theta", "J", J);
      current_statement__ = 38;
      stan::math::validate_non_negative_index("beta", "M", M);
      current_statement__ = 39;
      stan::math::validate_non_negative_index("beta", "K", K);
      current_statement__ = 40;
      stan::math::validate_non_negative_index("mu_theta", "J", J);
      current_statement__ = 41;
      stan::math::validate_non_negative_index("sigma_theta", "J", J);
      current_statement__ = 42;
      stan::math::validate_non_negative_index("mu_beta", "K", K);
      current_statement__ = 43;
      stan::math::validate_non_negative_index("sigma_beta", "K", K);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = (M * J) + (M * K) + J + J + K + K;
  }
  inline std::string model_name() const final {
    return "hier_reg_model";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.33.1",
             "stancflags = --filename-in-msg=hier_reg.stan"};
  }
  // Base log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_not_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "hier_reg_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,-1> theta =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(M, J, DUMMY_VAR__);
      current_statement__ = 1;
      theta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,-1>>(M, J);
      Eigen::Matrix<local_scalar_t__,-1,-1> beta =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(M, K, DUMMY_VAR__);
      current_statement__ = 2;
      beta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,-1>>(M, K);
      Eigen::Matrix<local_scalar_t__,-1,1> mu_theta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__);
      current_statement__ = 3;
      mu_theta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(J);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma_theta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__);
      current_statement__ = 4;
      sigma_theta = in__.template read_constrain_lb<
                      Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0,
                      lp__, J);
      Eigen::Matrix<local_scalar_t__,-1,1> mu_beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 5;
      mu_beta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(K);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma_beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 6;
      sigma_beta = in__.template read_constrain_lb<
                     Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0,
                     lp__, K);
      {
        current_statement__ = 7;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(mu_theta, 0, 4));
        current_statement__ = 8;
        lp_accum__.add(stan::math::cauchy_lpdf<propto__>(sigma_theta, 0, 4));
        current_statement__ = 9;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(mu_beta, 0, 4));
        current_statement__ = 10;
        lp_accum__.add(stan::math::cauchy_lpdf<propto__>(sigma_beta, 0, 4));
        current_statement__ = 14;
        for (int m = 1; m <= M; ++m) {
          current_statement__ = 11;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(theta, "theta",
                             stan::model::index_uni(m)), mu_theta,
                           sigma_theta));
          current_statement__ = 12;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(beta, "beta",
                             stan::model::index_uni(m)), mu_beta, sigma_beta));
        }
        current_statement__ = 20;
        for (int n = 1; n <= N; ++n) {
          int m = std::numeric_limits<int>::min();
          current_statement__ = 15;
          m = stan::model::rvalue(user, "user", stan::model::index_uni(n));
          local_scalar_t__ mu_n = DUMMY_VAR__;
          current_statement__ = 17;
          mu_n = (stan::math::dot_product(
                    stan::model::rvalue(D, "D", stan::model::index_uni(n)),
                    stan::model::rvalue(theta, "theta",
                      stan::model::index_uni(m)))
            +
            stan::math::dot_product(
              stan::model::rvalue(X, "X", stan::model::index_uni(n)),
              stan::model::rvalue(beta, "beta", stan::model::index_uni(m))));
          current_statement__ = 18;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(Y, "Y",
                             stan::model::index_uni(n)), mu_n, sigma));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  // Reverse mode autodiff log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "hier_reg_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,-1> theta =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(M, J, DUMMY_VAR__);
      current_statement__ = 1;
      theta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,-1>>(M, J);
      Eigen::Matrix<local_scalar_t__,-1,-1> beta =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(M, K, DUMMY_VAR__);
      current_statement__ = 2;
      beta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,-1>>(M, K);
      Eigen::Matrix<local_scalar_t__,-1,1> mu_theta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__);
      current_statement__ = 3;
      mu_theta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(J);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma_theta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__);
      current_statement__ = 4;
      sigma_theta = in__.template read_constrain_lb<
                      Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0,
                      lp__, J);
      Eigen::Matrix<local_scalar_t__,-1,1> mu_beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 5;
      mu_beta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(K);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma_beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 6;
      sigma_beta = in__.template read_constrain_lb<
                     Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0,
                     lp__, K);
      {
        current_statement__ = 7;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(mu_theta, 0, 4));
        current_statement__ = 8;
        lp_accum__.add(stan::math::cauchy_lpdf<propto__>(sigma_theta, 0, 4));
        current_statement__ = 9;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(mu_beta, 0, 4));
        current_statement__ = 10;
        lp_accum__.add(stan::math::cauchy_lpdf<propto__>(sigma_beta, 0, 4));
        current_statement__ = 14;
        for (int m = 1; m <= M; ++m) {
          current_statement__ = 11;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(theta, "theta",
                             stan::model::index_uni(m)), mu_theta,
                           sigma_theta));
          current_statement__ = 12;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(beta, "beta",
                             stan::model::index_uni(m)), mu_beta, sigma_beta));
        }
        current_statement__ = 20;
        for (int n = 1; n <= N; ++n) {
          int m = std::numeric_limits<int>::min();
          current_statement__ = 15;
          m = stan::model::rvalue(user, "user", stan::model::index_uni(n));
          local_scalar_t__ mu_n = DUMMY_VAR__;
          current_statement__ = 17;
          mu_n = (stan::math::dot_product(
                    stan::model::rvalue(D, "D", stan::model::index_uni(n)),
                    stan::model::rvalue(theta, "theta",
                      stan::model::index_uni(m)))
            +
            stan::math::dot_product(
              stan::model::rvalue(X, "X", stan::model::index_uni(n)),
              stan::model::rvalue(beta, "beta", stan::model::index_uni(m))));
          current_statement__ = 18;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(Y, "Y",
                             stan::model::index_uni(n)), mu_n, sigma));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    // suppress unused var warning
    (void) jacobian__;
    static constexpr const char* function__ =
      "hier_reg_model_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,-1> theta =
        Eigen::Matrix<double,-1,-1>::Constant(M, J,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      theta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,-1>>(M, J);
      Eigen::Matrix<double,-1,-1> beta =
        Eigen::Matrix<double,-1,-1>::Constant(M, K,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      beta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,-1>>(M, K);
      Eigen::Matrix<double,-1,1> mu_theta =
        Eigen::Matrix<double,-1,1>::Constant(J,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      mu_theta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(J);
      Eigen::Matrix<double,-1,1> sigma_theta =
        Eigen::Matrix<double,-1,1>::Constant(J,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      sigma_theta = in__.template read_constrain_lb<
                      Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0,
                      lp__, J);
      Eigen::Matrix<double,-1,1> mu_beta =
        Eigen::Matrix<double,-1,1>::Constant(K,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 5;
      mu_beta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(K);
      Eigen::Matrix<double,-1,1> sigma_beta =
        Eigen::Matrix<double,-1,1>::Constant(K,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 6;
      sigma_beta = in__.template read_constrain_lb<
                     Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0,
                     lp__, K);
      out__.write(theta);
      out__.write(beta);
      out__.write(mu_theta);
      out__.write(sigma_theta);
      out__.write(mu_beta);
      out__.write(sigma_beta);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,-1> theta =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(M, J, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(theta,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,-1>>(M, J),
        "assigning variable theta");
      out__.write(theta);
      Eigen::Matrix<local_scalar_t__,-1,-1> beta =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(M, K, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(beta,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,-1>>(M, K),
        "assigning variable beta");
      out__.write(beta);
      Eigen::Matrix<local_scalar_t__,-1,1> mu_theta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(mu_theta,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(J),
        "assigning variable mu_theta");
      out__.write(mu_theta);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma_theta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(sigma_theta,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(J),
        "assigning variable sigma_theta");
      out__.write_free_lb(0, sigma_theta);
      Eigen::Matrix<local_scalar_t__,-1,1> mu_beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 5;
      stan::model::assign(mu_beta,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(K),
        "assigning variable mu_beta");
      out__.write(mu_beta);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma_beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 6;
      stan::model::assign(sigma_beta,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(K),
        "assigning variable sigma_beta");
      out__.write_free_lb(0, sigma_beta);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "theta", "double",
        std::vector<size_t>{static_cast<size_t>(M), static_cast<size_t>(J)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "beta", "double",
        std::vector<size_t>{static_cast<size_t>(M), static_cast<size_t>(K)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "mu_theta",
        "double", std::vector<size_t>{static_cast<size_t>(J)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "sigma_theta",
        "double", std::vector<size_t>{static_cast<size_t>(J)});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "mu_beta",
        "double", std::vector<size_t>{static_cast<size_t>(K)});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "sigma_beta",
        "double", std::vector<size_t>{static_cast<size_t>(K)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,-1> theta =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(M, J, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> theta_flat__;
        current_statement__ = 1;
        theta_flat__ = context__.vals_r("theta");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            stan::model::assign(theta, theta_flat__[(pos__ - 1)],
              "assigning variable theta", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(theta);
      Eigen::Matrix<local_scalar_t__,-1,-1> beta =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(M, K, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> beta_flat__;
        current_statement__ = 2;
        beta_flat__ = context__.vals_r("beta");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            stan::model::assign(beta, beta_flat__[(pos__ - 1)],
              "assigning variable beta", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(beta);
      Eigen::Matrix<local_scalar_t__,-1,1> mu_theta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> mu_theta_flat__;
        current_statement__ = 3;
        mu_theta_flat__ = context__.vals_r("mu_theta");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
          stan::model::assign(mu_theta, mu_theta_flat__[(pos__ - 1)],
            "assigning variable mu_theta", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write(mu_theta);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma_theta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> sigma_theta_flat__;
        current_statement__ = 4;
        sigma_theta_flat__ = context__.vals_r("sigma_theta");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
          stan::model::assign(sigma_theta, sigma_theta_flat__[(pos__ - 1)],
            "assigning variable sigma_theta", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, sigma_theta);
      Eigen::Matrix<local_scalar_t__,-1,1> mu_beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> mu_beta_flat__;
        current_statement__ = 5;
        mu_beta_flat__ = context__.vals_r("mu_beta");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          stan::model::assign(mu_beta, mu_beta_flat__[(pos__ - 1)],
            "assigning variable mu_beta", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write(mu_beta);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma_beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> sigma_beta_flat__;
        current_statement__ = 6;
        sigma_beta_flat__ = context__.vals_r("sigma_beta");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          stan::model::assign(sigma_beta, sigma_beta_flat__[(pos__ - 1)],
            "assigning variable sigma_beta", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, sigma_beta);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"theta", "beta", "mu_theta",
                "sigma_theta", "mu_beta", "sigma_beta"};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(M),
                                                 static_cast<size_t>(J)},
                std::vector<size_t>{static_cast<size_t>(M),
                  static_cast<size_t>(K)},
                std::vector<size_t>{static_cast<size_t>(J)},
                std::vector<size_t>{static_cast<size_t>(J)},
                std::vector<size_t>{static_cast<size_t>(K)},
                std::vector<size_t>{static_cast<size_t>(K)}};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
        param_names__.emplace_back(std::string() + "theta" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
        param_names__.emplace_back(std::string() + "beta" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
      param_names__.emplace_back(std::string() + "mu_theta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma_theta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      param_names__.emplace_back(std::string() + "mu_beta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma_beta" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
        param_names__.emplace_back(std::string() + "theta" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
        param_names__.emplace_back(std::string() + "beta" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
      param_names__.emplace_back(std::string() + "mu_theta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma_theta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      param_names__.emplace_back(std::string() + "mu_beta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma_beta" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"theta\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(M) + ",\"cols\":" + std::to_string(J) + "},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(M) + ",\"cols\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"mu_theta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"parameters\"},{\"name\":\"sigma_theta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"parameters\"},{\"name\":\"mu_beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"sigma_beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"theta\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(M) + ",\"cols\":" + std::to_string(J) + "},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(M) + ",\"cols\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"mu_theta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"parameters\"},{\"name\":\"sigma_theta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"parameters\"},{\"name\":\"mu_beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"sigma_beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((M * J) + (M * K)) + J) + J) + K) + K);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((M * J) + (M * K)) + J) + J) + K) + K);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = hier_reg_model_namespace::hier_reg_model;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return hier_reg_model_namespace::profiles__;
}
#endif